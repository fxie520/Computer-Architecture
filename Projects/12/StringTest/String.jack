// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length, max_length;  // The "real" and max length of array

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let str = Array.new(maxLength);
        let max_length = maxLength;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        var Array new_str;
        var int i;

        // If length = max_length, reallocate a larger array to store the current string (before appending)
        if (length = max_length) {
            let new_str = Array.new(max_length + 5);  // 5 is a design choice
            // Copy old data to new array allocated
            while (i < max_length) {
                let new_str[i] = str[i];
                let i = i + 1;
            }
            // Recycle old memory
            do str.dispose();
            let max_length = max_length + 5;
        }
        let str[length] = c;
        let length = length + 1;
        return str;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int pos, val, current_char_scan_code, current_digit;
        var char current_char;

        let pos = 0;
        let val = 0;

        while (pos < length) {
            let current_char_scan_code = str[pos];
            // If scan code not between 48 and 57, i.e. current char is not a digit between 0 and 9, return
            if ((current_char_scan_code < 48) | (current_char_scan_code > 57)) {
                return val;
            }

            let current_digit = current_char_scan_code - 48;  // Convert from char (scan code) to int
            let val = val * 10 + current_digit;
        }

        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var String str_to_copy;
        var int i;

        let str_to_copy = String.int2String(val);
        let i = 0;
        let length = str_to_copy.length();
        let str = Array.new(5);  // The max number representable is 32767 which has 5 digits
        while (i < length) {
            let str[i] = str_to_copy[i];
        }
        return;
    }

    /** Helper function which converts int to string */
    function String int2String(int val) {
        var int last_digit, last_scan_code;
        var String str;

        let last_digit = val - val / 10;  // val mod 10
        let last_scan_code = last_digit + 48;  // Convert from int to char (scan code)
        if (val < 10) {
            let str = String.new(5);  // The max number representable is 32767 which has 5 digits
            return str.appendChar(last_scan_code);
        }
        else {
            let str = String.int2String(val / 10);
            return str.appendChar(last_scan_code);
        }
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}

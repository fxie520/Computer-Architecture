// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    // Base address of the screen
    static Array screen;
    // Screen size in terms of RAM words
    static int screen_size;
    // Current color to be used for drawXXX commands. Black is represented by true, white by false.
    static boolean current_color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let screen_size = 8192;
        let current_color = true;  // Default color is black

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = 0;

        // Clear screen
        while (i < screen_size) {
            do Memory.poke(screen + i, 0);
            let i = i + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let current_color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int value;
        var Array lookup_table;
        var int bit_to_change;

        let address = (y * 32) + (x / 16);
        let value = Memory.peek(screen + address);
        let lookup_table = Math.get_lookup_table();
        // The (x mod 16)-th bit, count from the left (in Hack's screen the MSB is the rightmost bit for some reason)
        let bit_to_change = x - ((x / 16) * 16);

        // If current color = black
        if (current_color) {
            let value = value | lookup_table[bit_to_change];
        }
        // If current color = white
        else {
            let value = value & (~(lookup_table[bit_to_change]));
        }

        // Set the new value
        do Memory.poke(screen + address, value);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b;
        var int sign_x, sign_y;  // sign_x = 1 if x1 < x2 else -1, same for sign_y
        var int dx, dy;
        var int diff;  // diff = a * dy - b * dx
        var int temp;

        // Special case: horizontal line
        let dy = Math.abs(y1 - y2);
        if (dy = 0) {
            // Make sure x1 < x2
            if (x1 > x2) {
                let temp = x1;
                let x1 = x2;
                let x2 = temp;
            }
            let a = x1;
            while (a < x2) {
                do Screen.drawPixel(a, y1);
                let a = a + 1;
            }
            return;
        }

        // Special case: vertical line
        let dx = Math.abs(x1 - x2);
        if (dx = 0) {
            // Make sure y1 < y2
            if (y1 > y2) {
                let temp = y1;
                let y1 = y2;
                let y2 = temp;
            }
            let b = y1;
            while (b < y2) {
                do Screen.drawPixel(x1, b);
                let b = b + 1;
            }
            return;
        }

        // If line goes from left to right or not
        if (x1 < x2) {let sign_x = 1;}
        else {let sign_x = -1;}

        // If line goes from bottom to top or not
        if (y1 < y2) {let sign_y = 1;}
        else {let sign_y = -1;}

        // General case
        let diff = 0;
        while ((~(a > dx)) & (~(b > dy))) {
            do Screen.drawPixel(x1 + (a * sign_x), y1 + (b * sign_y));

            if (diff < 0) {let a = a + 1; let diff = diff + dy;}
            else {let b = b + 1; let diff = diff - dx;}
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;

        let y = y1;

        while (~(y > y2)) {
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int temp1, temp2;

        let dy = -r;

        // For dy = -r, -r + 1, ..., r
        while (dy < (r + 1)) {
            let temp1 = Math.sqrt(r * r - (dy * dy));
            let temp2 = y + dy;
            do Screen.drawLine(x - temp1, temp2, x + temp1, temp2);
            let dy = dy + 1;
        }

        return;
    }
}
